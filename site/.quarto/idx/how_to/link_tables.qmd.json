{"title":"Create linelists with more than one entry sheets","markdown":{"yaml":{"title":"Create linelists with more than one entry sheets","description":"Define linelists with several tables which may nor may not be connected","categories":["Setup"]},"headingText":"Independent data tables","containsRefs":false,"markdown":"\n\nYou want the linelist to contain several data entry sheets. The important thing to think about is how the tables should be linked, if at all.\n\n\nIf you need to create two independent data tables[^1], just use different sheet names in the *Dictionary* sheet.\n\n[^1]: Example: a sheet containing patient data and a sheet containing bed occupancy data\n\n::: callout-note\nTechnically, a linelist with an \"*Info*\" and a \"*Patient linelist*\" sheet already has two entry sheets, one with a 1-dimension table and one with a 2-dimensions table.\n\nSince the two tables are created independently, you could have two sheets with 2-dimensions table.\n:::\n\n## Non independent tables\n\nSometimes you need to refer to data from another table, whether it is to use in a formula, to copy data or to populate a dropdown menu.\n\n### Refer to a single value in a formula\n\nIt is straightforward to use the values of **vlist1D** variable in a formula: just use the name of the variable in the formula[^2].\n\n[^2]: These variables can take only one value, see [the different sorts of tables](../reference/dictionary_sheet.qmd#sec-sheet-types) for more information.\n\n**Example**: the linelist user wants a variable with the name of the health structure in the data but in your setup, one site fills one excel file. In this case, you can create a calculated column that gets the name of the facility from a metadata sheet so that data encoders do not have to fill the name of the health structure again and again and again:\n\n> IF(ISBLANK(case_id), \"\", info_facility_name)\n\nSee the page on [formulas](../reference/dictionary_sheet.qmd#sec-formula) and [formulas controls](../reference/dictionary_sheet.qmd#sec-formula-control)\n\n### Link two tables\n\nA more complex situation is when you have two 2-dimensions tables that are not independent. In this case, the tables should at minima be linked by a **key**.\n\nExample of a user case:\n\n-   a main data entry sheet with general patient data (e.g. a *Patient linelist* sheet)\n-   a secondary entry sheet with additional variables for a subset of patients (*e.g.* readmission variables or extensive lab testing).\n\nIn this case, the natural way to link the tables is to have the ID of the patient in both tables.\n\n#### Constrain possibles values for patient IDs in the secondary table with list_auto {#sec-ht-list_auto}\n\nIn the user case above, the patients from the *Readmission* sheet are a subset from the *Patient linelist* sheet so we expect the IDs from *Readmission* to match the ones from *Patient linelist*.\n\nThe minimal (unsafe) option is to have two free text patient ID columns, one in each table, where data encoders enter IDs manually. This process however increases the risk of typing error and thus of merging nightmare.\n\nA safer way is to create a categorical variable in the *Readmission* sheet whose dropdown menu is populated by values present in the *case_id* column of the *Patient linelist* sheet. As the data encoder can only choose from existing patients from the *Patient linelist* sheet, the opportunity for encoding error and thus unmatched patients is greatly reduced.[^3]\n\n[^3]: If data are exported in R or Stata, you will be able to merge/join them extremely easily with the two IDs variables.\n\n![Use of list_auto to link two columns](../images/im-130-list-auto-3.png){fig-align=\"center\"}\n\nSeethe section on [list_auto](/reference/dictionary_sheet.qmd#sec-list-auto) and its [control](../reference/dictionary_sheet.qmd#sec-var-control-details) for a description on how to use the **list_auto** control.\n\n#### Import values from the other table with VALUE_OF\n\nIn addition to key columns to be able to join the tables, it might be desirable to bring some of the patient data in the secondary table, to calculate new variables, or just to facilitate reading and understanding without having fill the value on each line.\n\nFor example, we might want to bring in the name and surname of the patient, without entering it again, or the date of exit, to be able to calculate the number of days between the exit of the first admission and the date of readmission.\n\nThe custom function VALUE_OF can do that. It works sort of like a LOOKUP function, except we provide variable names, and it matches the value you need.\n\nIt takes three arguments, all **variable names**:\n\n> VALUE_OF(*key_variable1*, *key_variable2*, *variable_values*)\n\n> *key_variable1*: the list_auto in the current sheet (the key column that contains IDs, *e.g.* readmission_id)\n\n> *key_variable2*: the source of the list_auto in the other sheet (the IDs from the main sheet, *e.g.* case_id)\n\n> *variable_values*: the variable which values we want to import.\n\n![Illustration of the use of VALLUE_OF](../images/im-131-value-of.png){fig-align=\"center\"}\n\n::: callout-warning\n*key_variable2* and *variable_values* must be on the same sheet or the function will return nothing.\n:::\n\nThe function matches the values from columns *key_variable1* and *key_variable2*, and returns values from *variable_values* column at the corresponding row.\n\n::: callout-note\nIf the function finds more than two matches, it will return the values from the first match (the first line found).\n:::\n","srcMarkdownNoYaml":"\n\nYou want the linelist to contain several data entry sheets. The important thing to think about is how the tables should be linked, if at all.\n\n## Independent data tables\n\nIf you need to create two independent data tables[^1], just use different sheet names in the *Dictionary* sheet.\n\n[^1]: Example: a sheet containing patient data and a sheet containing bed occupancy data\n\n::: callout-note\nTechnically, a linelist with an \"*Info*\" and a \"*Patient linelist*\" sheet already has two entry sheets, one with a 1-dimension table and one with a 2-dimensions table.\n\nSince the two tables are created independently, you could have two sheets with 2-dimensions table.\n:::\n\n## Non independent tables\n\nSometimes you need to refer to data from another table, whether it is to use in a formula, to copy data or to populate a dropdown menu.\n\n### Refer to a single value in a formula\n\nIt is straightforward to use the values of **vlist1D** variable in a formula: just use the name of the variable in the formula[^2].\n\n[^2]: These variables can take only one value, see [the different sorts of tables](../reference/dictionary_sheet.qmd#sec-sheet-types) for more information.\n\n**Example**: the linelist user wants a variable with the name of the health structure in the data but in your setup, one site fills one excel file. In this case, you can create a calculated column that gets the name of the facility from a metadata sheet so that data encoders do not have to fill the name of the health structure again and again and again:\n\n> IF(ISBLANK(case_id), \"\", info_facility_name)\n\nSee the page on [formulas](../reference/dictionary_sheet.qmd#sec-formula) and [formulas controls](../reference/dictionary_sheet.qmd#sec-formula-control)\n\n### Link two tables\n\nA more complex situation is when you have two 2-dimensions tables that are not independent. In this case, the tables should at minima be linked by a **key**.\n\nExample of a user case:\n\n-   a main data entry sheet with general patient data (e.g. a *Patient linelist* sheet)\n-   a secondary entry sheet with additional variables for a subset of patients (*e.g.* readmission variables or extensive lab testing).\n\nIn this case, the natural way to link the tables is to have the ID of the patient in both tables.\n\n#### Constrain possibles values for patient IDs in the secondary table with list_auto {#sec-ht-list_auto}\n\nIn the user case above, the patients from the *Readmission* sheet are a subset from the *Patient linelist* sheet so we expect the IDs from *Readmission* to match the ones from *Patient linelist*.\n\nThe minimal (unsafe) option is to have two free text patient ID columns, one in each table, where data encoders enter IDs manually. This process however increases the risk of typing error and thus of merging nightmare.\n\nA safer way is to create a categorical variable in the *Readmission* sheet whose dropdown menu is populated by values present in the *case_id* column of the *Patient linelist* sheet. As the data encoder can only choose from existing patients from the *Patient linelist* sheet, the opportunity for encoding error and thus unmatched patients is greatly reduced.[^3]\n\n[^3]: If data are exported in R or Stata, you will be able to merge/join them extremely easily with the two IDs variables.\n\n![Use of list_auto to link two columns](../images/im-130-list-auto-3.png){fig-align=\"center\"}\n\nSeethe section on [list_auto](/reference/dictionary_sheet.qmd#sec-list-auto) and its [control](../reference/dictionary_sheet.qmd#sec-var-control-details) for a description on how to use the **list_auto** control.\n\n#### Import values from the other table with VALUE_OF\n\nIn addition to key columns to be able to join the tables, it might be desirable to bring some of the patient data in the secondary table, to calculate new variables, or just to facilitate reading and understanding without having fill the value on each line.\n\nFor example, we might want to bring in the name and surname of the patient, without entering it again, or the date of exit, to be able to calculate the number of days between the exit of the first admission and the date of readmission.\n\nThe custom function VALUE_OF can do that. It works sort of like a LOOKUP function, except we provide variable names, and it matches the value you need.\n\nIt takes three arguments, all **variable names**:\n\n> VALUE_OF(*key_variable1*, *key_variable2*, *variable_values*)\n\n> *key_variable1*: the list_auto in the current sheet (the key column that contains IDs, *e.g.* readmission_id)\n\n> *key_variable2*: the source of the list_auto in the other sheet (the IDs from the main sheet, *e.g.* case_id)\n\n> *variable_values*: the variable which values we want to import.\n\n![Illustration of the use of VALLUE_OF](../images/im-131-value-of.png){fig-align=\"center\"}\n\n::: callout-warning\n*key_variable2* and *variable_values* must be on the same sheet or the function will return nothing.\n:::\n\nThe function matches the values from columns *key_variable1* and *key_variable2*, and returns values from *variable_values* column at the corresponding row.\n\n::: callout-note\nIf the function finds more than two matches, it will return the values from the first match (the first line found).\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":5,"output-file":"link_tables.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":["flatly","../styles.scss"],"toc-expand":1,"toc-title":"Table of content","citations-hover":true,"footnotes-hover":true,"title":"Create linelists with more than one entry sheets","description":"Define linelists with several tables which may nor may not be connected","categories":["Setup"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}